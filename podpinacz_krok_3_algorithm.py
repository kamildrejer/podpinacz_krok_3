# -*- coding: utf-8 -*-

"""
/***************************************************************************
 PodpinaczKrok3
                                 A QGIS plugin
 Plugin porządkujący dane do warstw ostatecznych
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-09
        copyright            : (C) 2021 by Kamil Drejer
        email                : klamot@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Kamil Drejer'
__date__ = '2021-04-09'
__copyright__ = '(C) 2021 by Kamil Drejer'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFieldMapping,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterNumber)
import processing
import sys
import ast


class PodpinaczKrok3Algorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(QgsProcessingParameterVectorLayer(
                'wejscie',
                'wejscie',
                types=[QgsProcessing.TypeVectorAnyGeometry],
                defaultValue=None
            )
        )
        self.addParameter(QgsProcessingParameterNumber(
        'liczba',
        'Od jakiej liczby numerować l.p.?',
        type=QgsProcessingParameterNumber.Integer,
        minValue=0,
        defaultValue=1
            )
        )

        self.addParameter(QgsProcessingParameterEnum(
                'opcje',
                'opcje',
                options=['Domyśla mapa pól',
                'Wczytaj mapę pól z pliku',
                'Utwórz mapę pól poniżej',
                'CPK - stanowiska',
                'CPK - siedliska',
                ],
                allowMultiple=False,
                defaultValue=[]
            )
        )


        # self.addParameter(QgsProcessingParameterBoolean(
        #         'czy_standard',
        #         'Czy zamiast poniższe zastosować domyślne pola?',
        #         defaultValue=False
        #     )
        # )

        self.addParameter(QgsProcessingParameterFile(
                'plik_loadmap',
                'Plik zawierający mapę pól',
                optional=True,
                behavior=QgsProcessingParameterFile.File,
                fileFilter='Wszystkie pliki (*.txt)',
                defaultValue=None
            )
        )


        self.addParameter(QgsProcessingParameterFieldMapping(
                'mapapl',
                'mapa pól',
                parentLayerParameterName='wejscie'
            )
        )

        self.addParameter(QgsProcessingParameterBoolean(
                'czy_zapis_mapy',
                'Czy zapisać mapę pól do pliku?',
                defaultValue=False
            )
        )

        self.addParameter(
            QgsProcessingParameterFileDestination(
                name="OutputFile",
                description="Gdzie zapisać mapę pól?",
                optional=True
        )
    )


        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(QgsProcessingParameterFeatureSink(
                'Wynik',
                'wynik',
                type=QgsProcessing.TypeVectorAnyGeometry,
                createByDefault=True,
                supportsAppend=True,
                defaultValue=None
            )
        )

    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(0, model_feedback)
        results = {}
        outputs = {}

        # Kalkulator pól
        alg_params = {
            'FIELD_LENGTH': 4,
            'FIELD_NAME': 'temp',
            'FIELD_PRECISION': 0,
            'FIELD_TYPE': 1,
            'FORMULA': parameters['liczba'],
            'INPUT': parameters['wejscie'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['KalkulatorPl'] = processing.run('native:fieldcalculator', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # Zmień pola
        if parameters['opcje'] == 1:
            fieldmap = []
            with open(parameters['plik_loadmap'],'r') as inFile:
                fieldmap = ast.literal_eval(inFile.read())
            print(fieldmap[4])

            # inFile.close()
            alg_params = {
                'FIELDS_MAPPING': fieldmap,
                'INPUT': outputs['KalkulatorPl']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
        elif parameters['opcje'] == 2:
            alg_params = {
                'FIELDS_MAPPING': parameters['mapapl'],
                'INPUT': outputs['KalkulatorPl']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }

        elif parameters['opcje'] == 3:
            fieldmap = []
            plik='G:\\Dyski współdzielone\\1_Public\\QGiS\\Slowniki_inwentarki\\mapa_pol_stanowiska.txt'
            with open(plik,'r') as inFile:
                fieldmap = ast.literal_eval(inFile.read())
            print(fieldmap[4])

            # inFile.close()
            alg_params = {
                'FIELDS_MAPPING': fieldmap,
                'INPUT': outputs['KalkulatorPl']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }

        elif parameters['opcje'] == 4:
            fieldmap = []
            plik='G:\\Dyski współdzielone\\1_Public\\QGiS\\Slowniki_inwentarki\\mapa_pol_siedliska.txt'
            with open(plik,'r') as inFile:
                fieldmap = ast.literal_eval(inFile.read())
            print(fieldmap[4])

            # inFile.close()
            alg_params = {
                'FIELDS_MAPPING': fieldmap,
                'INPUT': outputs['KalkulatorPl']['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }

        else:
            alg_params = {
                'FIELDS_MAPPING': [
                    {'expression': '\"id\"','length': 6,'name': 'id.','precision': 0,'type': 2},
                    {'expression': '\"data\"','length': 10,'name': 'data','precision': 0,'type': 14},
                    {'expression': '\"im_naz\"','length': 200,'name': 'im_naz','precision': 0,'type': 10},
                    {'expression': 'case when length("Slowniki_spakr")>0 then "Slowniki_spakr"\r\nelse \r\ncase when length("Slowniki_kodn2k")>0 then "Slowniki_kodn2k"\r\nelse \r\n"Slowniki_kod"\r\nend end','length': 15,'name': 'akr','precision': 0,'type': 10},
                    {'expression': 'case when length( "Slowniki_sppol" )>0 then "Slowniki_sppol" \r\nelse \r\ncase when length( "Slowniki_ordpol" )>0 then "Slowniki_ordpol"  \r\nelse \r\ncase when length( "Slowniki_asspol" )>0 then  "Slowniki_asspol" \r\nelse \r\ncase when length( "Slowniki_sdln2k" )>0 then  "Slowniki_sdln2k" \r\nend end end end','length': 254,'name': 'naz_pl','precision': 0,'type': 10},
                    {'expression': 'case when length( "Slowniki_splac"  )>0 then "Slowniki_splac" \r\nelse \r\ncase when length( "Slowniki_ordlac"  )>0 then "Slowniki_ordlac"  \r\nelse \r\ncase when length( "Slowniki_asslac" )>0 then   "Slowniki_asslac" \r\nend end   end','length': 254,'name': 'naz_lac','precision': 0,'type': 10},
                    {'expression': '\"Slowniki_och\"','length': 100,'name': 'stat_ochr','precision': 0,'type': 10},
                    {'expression': '\"rodz_obs\"','length': 50,'name': 'rodz_obs','precision': 0,'type': 10},
                    {'expression': '\"liczba\"','length': 50,'name': 'liczebnosc','precision': 0,'type': 4},
                    {'expression': '\"jdn_lcz\"','length': 50,'name': 'jdn_lcz','precision': 0,'type': 10},
                    {'expression': '\"uwagi_ost\"','length': 254,'name': 'uwagi','precision': 0,'type': 10},
                    {'expression': '\"foto\"','length': 254,'name': 'foto','precision': 0,'type': 10},
                    {'expression': '\"X_92\"','length': 10,'name': 'X_92','precision': 2,'type': 6},
                    {'expression': '\"Y_92\"','length': 10,'name': 'Y_92','precision': 2,'type': 6}
                ],
            'INPUT': outputs['KalkulatorPl']['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }

        outputs['ZmiePola'] = processing.run('native:refactorfields', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # Usuń pola
        alg_params = {
            'COLUMN': ['temp'],
            'INPUT': outputs['ZmiePola']['OUTPUT'],
            'OUTPUT': parameters['Wynik']
        }
        outputs['UsuPola'] = processing.run('qgis:deletecolumn', alg_params, context=context, feedback=feedback, is_child_algorithm=True)



        results['Wynik'] = outputs['UsuPola']['OUTPUT']

        if parameters['czy_zapis_mapy'] == True:
        # Set the path for the output file
            original_stdout = sys.stdout # Save a reference to the original standard output
            print('zapis do pliku')
            print(parameters['OutputFile'])
            print(parameters['mapapl'])
            with open(parameters['OutputFile'], 'w') as f:
                sys.stdout = f # Change the standard output to the file we created.
                print(parameters['mapapl'])
                sys.stdout = original_stdout # Reset the standard output to its original value



        return results

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Podpinacz krok 3'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return PodpinaczKrok3Algorithm()
